<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: MySQL | The Whittington blog]]></title>
  <link href="http://elachys.github.com/blog/categories/mysql/atom.xml" rel="self"/>
  <link href="http://elachys.github.com/"/>
  <updated>2013-01-25T14:38:03+00:00</updated>
  <id>http://elachys.github.com/</id>
  <author>
    <name><![CDATA[Chris Whittington]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Install, index and test Sphinx (search engine)]]></title>
    <link href="http://elachys.github.com/blog/2011/05/30/sphinx-installation-usage/"/>
    <updated>2011-05-30T13:26:19+01:00</updated>
    <id>http://elachys.github.com/blog/2011/05/30/sphinx-installation-usage</id>
    <content type="html"><![CDATA[<h2>Installation</h2>

<p>download and extract the source:
<code>wget http://sphinxsearch.com/files/sphinx-2.0.1-beta.tar.gz
tar xvzf sphinx-2.0.1-beta.tar.gz
</code></p>

<p>Try and configure it (prefix is the path to install sphinx to)
<code>./configure --prefix=/usr/local/sphinx</code>
It will most likely error. In my case, i had to install the mysql-devel package, fix the problems and re-run configure until it works.</p>

<p><code>make</code>
At this point, i got the error:
<code>... line 512: exec: g++: not found</code>
I took this to mean i didn't have g++ installed...
<code>yum install gcc gcc-c++ make</code>
Then install
<code>make install</code></p>

<h2>Configuration</h2>

<p>If you've installed to the same location as me, make the config file in:
<code>/usr/local/sphinx/etc/sphinx.conf</code>
I like to use the following config file here. It gives me all the basic options for all sites on the server, but also allows me to drop a per-site config file into the folder that will also be included.
`</p>

<h1>!/bin/bash`</h1>

<p><code>cat &lt;&lt;-EOL
indexer
{
mem_limit = 32M
}</code></p>

<p>`searchd
{</p>

<h1>IP address to bind on</h1>

<h1>optional, default is 0.0.0.0 (ie. listen on all interfaces)</h1>

<p>#</p>

<h1>address                               = 127.0.0.1</h1>

<h1>address                               = 192.168.0.1</h1>

<h1>searchd TCP port number</h1>

<h1>mandatory, default is 3312</h1>

<p>port                            = 3312</p>

<h1>log file, searchd run info is logged here</h1>

<h1>optional, default is 'searchd.log'</h1>

<p>log                                     = /var/log/sphinx/searchd.log</p>

<h1>query log file, all search queries are logged here</h1>

<h1>optional, default is empty (do not log queries)</h1>

<p>query_log                       = /var/log/sphinx/query.log</p>

<h1>client read timeout, seconds</h1>

<h1>optional, default is 5</h1>

<p>read_timeout            = 5</p>

<h1>maximum amount of children to fork (concurrent searches to run)</h1>

<h1>optional, default is 0 (unlimited)</h1>

<p>max_children            = 30</p>

<h1>PID file, searchd process ID file name</h1>

<h1>mandatory</h1>

<p>pid_file                        = /var/log/sphinx/searchd.pid</p>

<h1>max amount of matches the daemon ever keeps in RAM, per-index</h1>

<h1>WARNING, THERE'S ALSO PER-QUERY LIMIT, SEE SetLimits() API CALL</h1>

<h1>default is 1000 (just like Google)</h1>

<p>max_matches                     = 100000</p>

<h1>seamless rotate, prevents rotate stalls if precaching huge datasets</h1>

<h1>optional, default is 1</h1>

<p>seamless_rotate         = 1</p>

<h1>whether to forcibly preopen all indexes on startup</h1>

<h1>optional, default is 0 (do not preopen)</h1>

<p>preopen_indexes         = 0</p>

<h1>whether to unlink .old index copies on succesful rotation.</h1>

<h1>optional, default is 1 (do unlink)</h1>

<p>unlink_old                      = 1
workers = threads
}
EOL</p>

<p>find . -name '*.include' -exec bash {} \;`</p>

<p>In this example config, we'll be reading from a MySQL database . Note: sphinx also supports Postgres. Our catalog is called catalog :-) you should name it something different for each different "thing" you'll be indexing.
`</p>

<h1>!/bin/bash</h1>

<p>cat &lt;&lt;-EOL
source catalog
{
type = mysql</p>

<p>sql_host = localhost
sql_user = dbuser
sql_pass = dbpassword
sql_db = dbtablename
sql_sock = /var/lib/mysql/mysql.sock
sql_port = 3306</p>

<h1>indexer query</h1>

<h1>document_id MUST be the very first field</h1>

<h1>document_id MUST be positive (non-zero, non-negative)</h1>

<h1>document_id MUST fit into 32 bits</h1>

<h1>document_id MUST be unique</h1>

<p>sql_query = SELECT id,field1 FROM tablename;</p>

<h1>sql_group_column = query</h1>

<h1>document info query</h1>

<h1>ONLY used by search utility to display document information</h1>

<h1>MUST be able to fetch document info by its id, therefore</h1>

<h1>MUST contain '$id' macro</h1>

<p>#
sql_query_info = SELECT * FROM tablename WHERE id=\$id</p>

<p>}</p>

<p>index catalog
{
source = catalog
path = /var/data/sphinx/catalog
morphology = stem_en</p>

<h1>min_word_len = 3</h1>

<h1>min_prefix_len = 0</h1>

<h1>min_infix_len = 3</h1>

<p>}</p>

<p>EOL
`</p>

<h2>Indexing &amp; Testing</h2>

<p>Move to your config directory
<code>cd /usr/local/sphinx/etc</code></p>

<p>Once everything is setup, you'll need to do an index of your data. Usually, the following command will do this:
<code>sudo /usr/local/sphinx/bin/indexer --all</code>
 You can then use the following to test (where your search term is "travel")
<code>/usr/local/sphinx/bin/search travel</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL Querying two or more databases]]></title>
    <link href="http://elachys.github.com/blog/2010/09/24/mysql-querying-two-or-more-databases/"/>
    <updated>2010-09-24T05:04:21+01:00</updated>
    <id>http://elachys.github.com/blog/2010/09/24/mysql-querying-two-or-more-databases</id>
    <content type="html"><![CDATA[<p>First, you need to grant permissions to one user for both databases.</p>

<p>then, when running queries you specify your database at the begining. eg:</p>

<pre><code>SELECT * from `database1`.`table`
UNION
SELECT * from `database2`.`table` ORDER BY 1
</code></pre>

<p>This will merge the results together removing duplicates and the order by will happen to both tables.</p>

<p>If you want to see duplicate rows. You need to use UNION ALL instead of plain UNION</p>

<p>WHERE portions of queries must be run in both queries.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Load balancing / high availability for the LAMP stack]]></title>
    <link href="http://elachys.github.com/blog/2010/09/03/load-balancing-high-availability-for-the-lamp-stack/"/>
    <updated>2010-09-03T10:46:34+01:00</updated>
    <id>http://elachys.github.com/blog/2010/09/03/load-balancing-high-availability-for-the-lamp-stack</id>
    <content type="html"><![CDATA[<h1>Load balancers</h1>

<p>Load balancers sit in-front of the web and database servers. These decide which web server each HTTP request from a client goes to.</p>

<p>After your firewall, this is the first thing that gets it.</p>

<p>Pen is a linux app which does this extremely simply and can be installed from apt-get. An example syntax would be:
<code>sudo pen –df 80 192.168.1.105 192.168.1.106</code></p>

<p>-df keeps pen running in the foreground and also displays debug info (not what you want for a production configuration). You need to use sudo for pen on ports below 1024.</p>

<p>80 is the port pen is monitoring (the HTTP port)</p>

<p>After that it’s just a space separated list of your web servers.</p>

<h2>PHP Considerations</h2>

<p>Your PHP file based sessions will no longer work, switch to network storage or use mysql. Your web servers are now stateless as the user could arrive on a different server for each request.</p>

<hr />

<h1>Web servers</h1>

<p>Just your standard installs of apache and php running. No need for mysql here. I would recommend keeping the same httpd.conf file on each server to reduce confusion. These servers are cheap and disposable.</p>

<h2>PHP Considerations</h2>

<p>Saving state across multiple webservers might become a problem. Standard PHP file based sessions will be bound to one webserver if no network storage is used. Alternatively, switching your sessions to MySQL keeps your webservers stateless and is much easier. You can overwrite PHP’s standard sessions handler pretty easily and replace it with a MySQL one.</p>

<hr />

<h1>Database servers</h1>

<p>Linux installs running MySQL. These are generally broken into two types, master and slave. There is usually a single master who handles all the writes (INSERT / UPDATE queries) .</p>

<p>The complex reads (SELECT queries) are handled by any of the mysql slaves. Spend your money on a good master as you only get one without mysql enterprise as standard MySQL doesn’t support  a multimaster setup out of the box.</p>

<h2>PHP Considerations</h2>

<p>PHP’s mysql_connect should use your mysql servers hostnames and not localhost.</p>

<p>You might want to separate your reads and writes to point to the seperate MySQL master / slave hostnames. This is not mandatory as you can use mysql-proxy to monitor each request and send it to either the master or a slave. Although i would suggest using mysql-proxy in this way only for legacy systems where code changes are not an option.</p>

<p>You will also want to keep a reference to each of your mysql connections.</p>

<hr />

<h1>Conclusions</h1>

<p>One thing I noticed is that using IP addresses in your configuration files could get seriously confusing. I would suggest making some dummy hostnames and settings the IP’s in the hosts file for each machine. That way, if IP addresses change, you only have to update one file on each host.</p>

<p>Also, I wouldn’t use pen for anything big. Instead, invest in a good hardware load balancer. Preferably two with heartbeat so if one goes down the other takes over. Ultramonkey might also offer a solution if hardware load balancers are too expensive.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[convert timestamp to mysql datetime in PHP]]></title>
    <link href="http://elachys.github.com/blog/2010/06/18/convert-timestamp-to-mysql-datetime-in-php/"/>
    <updated>2010-06-18T09:59:17+01:00</updated>
    <id>http://elachys.github.com/blog/2010/06/18/convert-timestamp-to-mysql-datetime-in-php</id>
    <content type="html"><![CDATA[<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php echo date(&quot;Y-m-d H:i:s&quot;,$timestamp); ?&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Optimize All Tables In A MySQL Database]]></title>
    <link href="http://elachys.github.com/blog/2010/05/28/optimize-all-tables-in-a-mysql-database/"/>
    <updated>2010-05-28T09:04:41+01:00</updated>
    <id>http://elachys.github.com/blog/2010/05/28/optimize-all-tables-in-a-mysql-database</id>
    <content type="html"><![CDATA[<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">$alltables = mysql_query(&quot;SHOW TABLES&quot;);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;while ($table = mysql_fetch_assoc($alltables)) {&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;foreach ($table as $db =&amp;gt; $tablename) {</span>
</span><span class='line'><span class="x">    mysql_query(&quot;OPTIMIZE TABLE &#39;&quot;. mysql_real_escape_string($tablename) .&quot;&#39;&quot;);</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'><span class="x">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;}</span>
</span><span class='line'><span class="x">?&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
