<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | The Whittington blog]]></title>
  <link href="http://elachys.github.com/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://elachys.github.com/"/>
  <updated>2013-01-25T14:19:29+00:00</updated>
  <id>http://elachys.github.com/</id>
  <author>
    <name><![CDATA[Chris Whittington]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git stash]]></title>
    <link href="http://elachys.github.com/blog/2011/05/26/git-stash/"/>
    <updated>2011-05-26T10:05:00+01:00</updated>
    <id>http://elachys.github.com/blog/2011/05/26/git-stash</id>
    <content type="html"><![CDATA[<p>Made changes to your local files but don't want to commit them yet?
Stash your changes, do something else. Commit, and load back in your changes.</p>

<h2>Stash a commit</h2>

<p>This will stash a commit with a helpful name / phrase that you can use to jog your memory later on.
<code>$ git stash save usefulname</code></p>

<h2>List stashed commits</h2>

<p>This will show all your currently stashed commits.
<code>$ git stash list
stash@{0}: WIP on branch-name ....
stash@{1}: WIP on dbranch-name: ....
stash@{2}: On branch-name: ....
</code></p>

<h2>Apply a stash</h2>

<p>You can revert back to a stash at any time as follows.
<code>$ git stash apply stash@{0}</code></p>

<h2>Removing a stash</h2>

<p>Even after applying a stash, they still hang around. You can remove them as follows:
<code>$ git stash drop stash@{0}</code></p>

<h2>Clear all stashed entries</h2>

<p><code>$ git stash clear</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git: Squash commits]]></title>
    <link href="http://elachys.github.com/blog/2011/04/28/git-squash-commits/"/>
    <updated>2011-04-28T03:15:28+01:00</updated>
    <id>http://elachys.github.com/blog/2011/04/28/git-squash-commits</id>
    <content type="html"><![CDATA[<p>If you want to modify the last 2 commits
<code>git rebase -i HEAD~2</code>
This should (hopefully)  display the interactive editor. You'll more than likely want to leave the first line as is, and then change "pick" to "squash" for the second commit.
Once you're done, close the editor (ctrl+x) and save the file. A new interactive screen will popup allowing you to make a commit message, then close and save the file as before.
<code>git log</code> will now show the new commit (with it's new commit id).
You'll then need to push the commit.</p>

<p>If you get a fast-forward error when you go to push (this happens most of the time for me) you can force it with -f. If you do this, make sure you've pulled the latest copy or commits can go missing / out of sync.
<code>
git push -f origin master
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git basics cheatsheet]]></title>
    <link href="http://elachys.github.com/blog/2011/04/05/git-basics-cheatsheet/"/>
    <updated>2011-04-05T14:38:02+01:00</updated>
    <id>http://elachys.github.com/blog/2011/04/05/git-basics-cheatsheet</id>
    <content type="html"><![CDATA[<h2>Clone</h2>

<p>Use the following to clone a repo and put it's contents in a local directory.
<code>git clone http://repourl.com mydirectory</code></p>

<h2>Status</h2>

<p>See what files you have to check in, and some other general stats</p>

<p><code>git status</code></p>

<h2>branches</h2>

<p>Switch between branches using the following</p>

<p><code>git checkout branchname</code></p>

<p>Create a branch and switch to that branch</p>

<p><code>git checkout -b mybranchname</code></p>

<h2>committing</h2>

<p>Once you have changed a file, you must add it to the latest commit (much like svn), although the changes are not actually sent to the remote server until you "push" them</p>

<p><code>git add myfile.html</code>
<code>git commit -m "what i have done to the file"</code></p>

<h2>push</h2>

<p>Push once all your changes have been made and you've made a new commit</p>

<p><code>git push origin branchname</code></p>

<h2>ignore files</h2>

<p>Create a file in the root of your repo called .gitignore</p>

<p>You can either ignore single files or use * as a wildcard</p>

<h2>show history</h2>

<p>You can show the history of a repo by doing:
<code>git log</code></p>

<h2>Show information about a particular commit</h2>

<p>After using <code>git log</code> to see all your commits, you might want to look at one in a little more detail, well just use this:
<code>git show myhashstring</code></p>

<h2>Cherry picking</h2>

<p>If you only want to get a certain commit, you can do the following (-x retains the original commit message).
<code>git cherry-pick -x my-commit-hash</code></p>

<h2>Current remote repo url</h2>

<p>If you want to clone a repo you already have setup somewhere else but can't remember the clone path. Use:
<code>git remote -v</code></p>

<h2>Ignore file permissions</h2>

<h2></h2>

<p>Stops git tracking file permission changes.
<code>git config core.filemode false</code></p>
]]></content>
  </entry>
  
</feed>
